str(invisible)
mean(x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
y
x
ls()
debug(lm)
lm(y-x)
break
stop
debug(lm)
lm(y-x)
y<- 4
debug(lm)
lm(y-x)
debug(lm)
lm(y-x)
debug(lm)
lm(y-x)
ls()
options(error=recover)
lm(y-x)
ls()
y
options(error=NULL)
y
source("makeVector.R")
getwd()
?xtabs
title: "README"
getwd()
pnorm(24,21,5)
qnorm(21,5)
?qnorm
qnorm(0.7257469,21,5)
qnorm(0.1,21,5)
qnorm(0.2,77,5)
choose(9,2)
choose(4,2)
262*(.738)
sqrt(193.356)
qbinom(0.7,245,0.25)
dbinom(70:245,245,0.25)
sum(dbinom(70:245,245,0.25))
dbinom(2,10,0.56)
dbinom(600,1000,0.56)
dbinom(60,100,0.56)
sum(dbinom(60:100,100,0.56))
5/7
#n=10,p=0.7142857,k=1
#np(1-p)
1-5/7
(5/7)*(1-5/7)
dbinom(1,10,0.07)
sum(dbinom(1:10,10,0.07))
5/7
10*(0.07^1)*((1-0.07)^9)
dbinom(2,10,0.56)
dbinom(600,1000,0.56)
dbinom(6,10,0.56)
sum(dbinom(60:100,100,0.56))
1-0.055
0.99*.055
0.01*.055
0.995*0.945
1-0.995
0.005*0.945
0.05445/ (0.05445 + 0.004725)
dbinom(50,160,0.28)
sum(dbinom(50:160,160,0.28))
160*.28
160*.28*(1-0.28)
sqrt(32.256)
pnorm(50,44.8,5.679437)
?pnorm
pnorm(44.8,44.8,5.679437)
load(url("http://www.openintro.org/stat/data/kobe.RData"))
head(kobe)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
istreak <- calc_streak(sim_basket)
table(istreak)
sim_basket <- sample(outcomes, size = 100, replace = TRUE)
istreak <- calc_streak(sim_basket)
table(istreak)
qnorm(0.025)
qnorm(0.025)
qnorm(0.95)
qnorm(0.68)
pnorm(0.5,0,1)
pnorm(0.75,0,1)
pnorm(0.95,0,1)
qnorm(1)
qnorm(0.01)
qnorm(0.9)
?rexp
qnorm(.0418)
pnorm(1.73,0,1)
1-pnorm(1.73,0,1)
qnorm(1-pnorm(1.73,0,1))
?double
rexp(40,0.2)
mean(rexp(40,0.2))
expdist <- rep(NA,1000)
for (i in 1:1000){
expdist[i] <- mean(rexp(40,0.2))
}
rm(list=ls())
expdist <- rep(NA,1000)
for (i in 1:1000){
expdist[i] <- mean(rexp(40,0.2))
}
mean(expdist)
?var
pexp(0.5)
pexp(0.5,0.2)
pexp(1,0.2)
((1/0.2)^2)/40
var(expdist)
?scale
scale(expdist)
?hist
expscale <- scale(expdist)
hist(expscale,probability=T, main="", ylim=c(0, 0.4))
expscale <- scale(expdist)
hist(expscale,probability=T, main="", ylim=c(0, 0.5))
lines(density(expscale))
expscale <- scale(expdist)
hist(expscale,probability=T, main="", ylim=c(0, 0.5))
lines(density(expscale))
# Compare with the standard normal distribution
curve(dnorm(x,0,1), -3, 3, col="red", add=T)
?qqnorm
pnorm(1:1000,0,1)
p <- pnorm(1:1000,0,1)
qqplot(expdist,p)
qqplot(expdist)
?qnorm
lowercl <- expdist - qnorm(0.975) * (1/0.2)/sqrt(40)
uppercl <- expdist + qnorm(0.975) * (1/0.2)/sqrt(40)
expci <- mean(lowercl < (1/0.2) & lowercl > (1/0.2))
lowercl
expci
expci <- mean(lowercl < (1/0.2) & uppercl > (1/0.2))
expci
quit()
quit
quit()
1209/5799
35/290
146/341
?power
?exp
3^3
0.07^7
0.07^7 + 0.07^6 +0.07^5 +0.07^4 +0.07^3 +0.07^2 +0.07^1
0.3*0.5/ (0.25*0.7 + 0.3*0.50)
5/5.48
?pnorm
sqrt(216)
699/40
1500 - 699
2.33*300/sqrt(216)
2.33*300/sqrt(217)
2.33*300/sqrt(131)
2.33*300/sqrt(306)
699*699/1600
sqrt(699/40)
699/40
sqr(699/40)
(699/40)^2
4*sqrt(35)/17
1-0.9133
1.645*4.31/6
a <- 1.645*4.31/6
30.69 -a
30.69 +a
?dbinom
dbinom(6,10,0.56)
7*8*9*10/(2*3*4)
0.56^6 * 0.44^4 *210
pbinom(6,10,0.56)
dbinom(0,10,0.56)
dbinom(1,10,0.56)
dbinom(2,10,0.56)
dbinom(3,10,0.56)
dbinom(4,10,0.56)
dbinom(5,10,0.56)
dbinom(6,10,0.56)
dbinom(6,10,0.56) + dbinom(5,10,0.56) + dbinom(4,10,0.56) + dbinom(3,10,0.56) + dbinom(2,10,0.56) + dbinom(1,10,0.56)+dbinom(0,10,0.56)
dbinom(6,10,0.56)
dbinom(6,10,0.56) + dbinom(5,10,0.56) + dbinom(4,10,0.56) + dbinom(3,10,0.56) + dbinom(2,10,0.56) + dbinom(1,10,0.56)+dbinom(0,10,0.56)
pbinom(6,10,0.56)
sqrt(40)*(9.51-10)
sqrt(40)*(9.51-10)/4.65
.02*.91
.9*.09
.09*.9
.91*2/100
.91*2/100 + .09*.9
.09*.9 / (.09*.9 + .02*.91)
1.28*18/4
(1.28*18/4)^2
5.76^2
1.28*18/(sqrt(33))
1.28*18/(sqrt(34))
1.28*18/(sqrt(35))
11/sqrt(1028)
1.96*11/sqrt(1028)
1.96*.11/sqrt(1028)
13/15
10/15
23/30
pnorm(1.645)
qnorm(.8)
qnorm(.85)
qnorm(.9)
qnorm(.95)
qnorm(.98)
qnorm(.99)
qnorm(.975)
pnorm(.975)
pnorm(.025)
pnorm(1.959964)
qnorm(.05)
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1', display.mode = "showcase")
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("03_reactivity") # a reactive expression
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(plot(1:x), x=slider(1,50))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(rcharts)
library(rCharts)
install.packages("rCharts")
library(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
library(airquality)
airquality
summary(airquality)
dim(airquality)
names(airquality)
dTable(airquality, sPaginationType = "full_numbers")
?dTable
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
data(galton)
library(shiny)
data(galton)
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
shiny::runApp('C:/MyBigData/DevDataPdt/l1')
2* pt(2.24,df=21,lower.tail=false)
2* pt(2.24,df=21,lower.tail=FALSE)
26.33-18.125
26.33^2 + 18.125^2
1.64*10.21785
1.65*1.3
-3.48+2.145
-3.48-2.145
1.96*1.3
-3.48-2.548
-3.48+2.548
3.4^2/10
2.7^2/11
3.4^2/10 + 2.7^2/11
3.4^2
2.7^2
7.29/11
1.156+0.6627273
sqrt(1.818727)
11.56+7.29
sqrt(18.85)
sqrt(18.85)/6
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical",order=c("smoker","nonsmoker"))
source('C:/MyBigData/Duke-DASI/inference.R')
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical",order=c("smoker","nonsmoker"))
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
inference(spain$response, spain$year, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
source("http://bit.ly/dasi_inference")
load(url("http://bit.ly/dasi_anes_data"))
rm(list=ls())
load(url("http://bit.ly/dasi_anes_data"))
class(anes)
anes1 <- anes[,c("presapp_job_x","dem_raceeth")]
t <- table(anes1$presapp_job_x)
class(t)
barplot(t$Freq,t$Var1,cex.axis=0.6,cex.names=0.5)
t
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth))
table(anes1$presapp_job_x,anes1$dem_raceeth)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, legend())
legend()
legend("topright", levels(anes1$presapp_job_x) )
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, legend())
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5)
legend("topright", levels(anes1$presapp_job_x), pch = 15 )
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=rainbow(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=rainbow(4) )
rainbow(4)
?rainbow
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=cm.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=cm.colors(4) )
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=gray.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4) )
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=blue.colors(4))
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=gray.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), cex.names = 0.5)
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4))
?legend
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), cex.names = 0.5)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=gray.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), pt.cex = 0.5)
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), pt.cex = 0.25)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.5, col=gray.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), cex = 0.5)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.75, col=gray.colors(4))
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.6, col=gray.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), cex = 0.6)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.6, col=gray.colors(4), beside = TRUE)
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), cex = 0.6)
barplot(table(anes1$presapp_job_x,anes1$dem_raceeth), cex.axis =0.6, cex.names = 0.6, col=gray.colors(4))
legend("topright", levels(anes1$presapp_job_x), pch = 15, col=gray.colors(4), cex = 0.6)
mosaicplot(table(anes1$presapp_job_x,anes1$dem_raceeth))
?mosaicplot
rm(list=ls())
load(url("http://bit.ly/dasi_anes_data"))
dim(anes)
str(anes)
anes.sub <- anes[,c("presapp_job_x","dem_raceeth")]
str(anes.sub)
summary(anes.sub)
anes.sub <- complete.cases(anes.sub)
anes.sub <- anes[,c("presapp_job_x","dem_raceeth")]
anes.sub <- anes.sub[complete.cases(anes.sub),]
summary(anes.sub)
5754+137+29
freq.presapp <- table(anes.sub$presapp_job_x)
length(freq.presapp)
nrow(anes.sub$presapp_job_x)
nrow(anes.sub)
freq.presapp <- table(anes.sub$presapp_job_x)
relfreq.presapp <- freq.presapp/nrow(anes.sub)
freq.raceeth <- table(anes.sub$dem_raceeth)
relfreq.raceeth <- freq.raceeth/nrow(anes.sub)
cbind(freq.presapp, relfreq.presapp)
cbind(freq.raceeth, relfreq.raceeth)
table(anes.sub$presapp_job_x,anes.sub$dem_raceeth)
t <- as.data.frame(table(anes.sub$presapp_job_x,anes.sub$dem_raceeth)
)
t
rm(t)
summary(anes.sub)
source("http://bit.ly/dist_calc")
source("http://bit.ly/dasi_inference")
table(anes.sub$presapp_job_x,anes.sub$dem_raceeth)
summary(anes.sub)
CTable <- matrix(c(764,809,468,133,680,133,212,71,423,32,113,35,1548,22,191,120),byrow=TRUE,ncol=4)
CTable
colnames(CTable)=c(levels(sub$dem_raceeth))
colnames(CTable)=c(levels(anes.sub$dem_raceeth))
CTable
rownames(CTable)=c(levels(anes.sub$presapp_job_x))
CTable
rbind(CTable,c(3415,996,984,359))
cbind(CTable,c(2174,1096,603,1881))
CTable
CTable <- cbind(CTable,c(2174,1096,603,1881))
CTable <- rbind(CTable,c(3415,996,984,359))
CTable <- rbind(CTable,c(3415,996,984,359,5754))
CTable
nrow(CTable)
CTable <- CTable[1:5,]
nrow(CTable)
CTable
rm(list=ls())
table(anes.sub$presapp_job_x,anes.sub$dem_raceeth)
load(url("http://bit.ly/dasi_anes_data"))
anes.sub <- anes[,c("presapp_job_x","dem_raceeth")]
anes.sub <- anes.sub[complete.cases(anes.sub),]
table(anes.sub$presapp_job_x,anes.sub$dem_raceeth)
summary(anes.sub)
CTbl <- matrix(c(764,809,468,133,2174,680,133,212,71,1096,423,32,113,35,603,1548,22,191,120,1881,3415,996,984,359,5754),byrow=TRUE,ncol=5)
CTbl
colnames(CTbl) <- c(c(levels(anes.sub$dem_raceeth),"Total")
)
CTbl
rownames(CTbl) <- c(levels(anes.sub$presapp_job_x),"Total")
CTbl
?chisq.test()
ctbl <- table(anes.sub$presapp_job_x,anes.sub$dem_raceeth)
ctbl
chisq.test(ctbl)
chisq.test(ctbl)
a <- chisq.test(ctbl)
class(a)
?htest
rm(list=ls())
library(slidify)
setwd("c:/mybigdata/myslidify")
author("devdatapdt")
slidify("index.Rmd")
browseURL("index.html")
* `shiny` - required for the shiny application
`runApp(displayMode = 'showcase')`
To use this application, download the server.R and ui.R files from this repository and use ```runApp()``` to execute
---
## Introduction
)
